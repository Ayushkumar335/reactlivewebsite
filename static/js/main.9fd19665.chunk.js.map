{"version":3,"sources":["serviceWorker.js","List1.jsx","TodoList.jsx","index.js"],"names":["Boolean","window","location","hostname","match","List1","props","useState","line","setChange","className","onClick","style","textDecoration","Itemval","TodoLIst","items","newItems","setValue","type","placeholder","onChange","event","target","value","Button","variant","oldItems","map","val","ReactDOM","render","StrictMode","TodoList","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iOAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sDCESC,EAlBD,SAACC,GAAW,IAAD,EACEC,oBAAS,GADX,mBACdC,EADc,KACTC,EADS,KAMzB,OAAS,oCACT,yBAAKC,UAAU,SACf,8BACA,kBAAC,IAAD,CAAmBC,QAPN,WACTF,GAAU,IAMqBC,UAAU,gBAE7C,wBAAIE,MAAO,CAACC,eAAgBL,EAAK,eAAe,SAAUF,EAAMQ,YCkCjDC,EA1CE,WAAO,IAAD,EACKR,qBADL,mBACZS,EADY,KACNP,EADM,OAEOF,mBAAS,IAFhB,mBAEZU,EAFY,KAEHC,EAFG,KAcnB,OACI,oCACA,yBAAKR,UAAU,cACX,yBAAKA,UAAU,OACf,6BACA,wCACA,6BACA,2BAAOS,KAAK,OACXC,YAAY,YACXC,SApBK,SAACC,GACZb,EAAUa,EAAMC,OAAOC,QAoBnBA,MAAOR,IAEP,kBAACS,EAAA,EAAD,CAAQC,QAAQ,WAAWf,QApBpB,WACXO,GAAS,SAACS,GACN,MAAM,GAAN,mBAAWA,GAAX,CAAoBX,OAGxBP,EAAU,KAesCC,UAAU,WAAU,kBAAC,IAAD,OAChE,4BACIO,EAASW,KAAI,SAACC,GACX,OAAQ,kBAAC,EAAD,CACJf,QAASe,YC7BhCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,SHyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9fd19665.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useState } from \"react\"\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nconst List1 = (props) => {\r\n    const [line,setChange]=useState(false);\r\nconst myfun= () => {\r\n    setChange(true)\r\n}\r\n\r\nreturn  (<>\r\n<div className=\"todoL\">\r\n<span >\r\n<DeleteOutlineIcon onClick={myfun} className=\"deleteIcon\"/>\r\n</span>\r\n<li style={{textDecoration: line?'line-through':'none'}}>{props.Itemval}</li>\r\n</div>\r\n\r\n</>\r\n)\r\n}\r\n\r\nexport default List1;","import React, { useState } from \"react\"\r\nimport Button from '@material-ui/core/Button';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport \"./index.css\"\r\nimport List1 from \"./List1\"\r\nconst TodoLIst = () => {\r\n    const [items,setChange]=useState();\r\n    const [newItems,setValue]=useState([]);\r\n    const myfun1 = (event) => {\r\n        setChange(event.target.value);\r\n    }\r\n    const myfun2 = () => {\r\n        setValue((oldItems)=>{\r\n            return [...oldItems,items]\r\n\r\n        })    \r\n        setChange(\"\")\r\n    }\r\n\r\n    return (\r\n        <>\r\n        <div className=\"center_div\">\r\n            <div className=\"box\">\r\n            <br/>\r\n            <h1>TodoList</h1>\r\n            <br/>\r\n            <input type=\"text\"\r\n             placeholder=\"add Items\"\r\n              onChange={myfun1} \r\n            value={items}\r\n              />\r\n            <Button variant=\"outlined\" onClick={myfun2} className=\"button1\"><AddIcon/></Button>\r\n            <ul>\r\n               {newItems.map((val)=>{\r\n                   return  <List1\r\n                       Itemval={val}\r\n                   />\r\n               })}\r\n            </ul>\r\n            </div>\r\n           \r\n        </div>\r\n        \r\n        </>\r\n    )\r\n}\r\n\r\nexport default TodoLIst;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport TodoList from \"./TodoList\"\nReactDOM.render(\n  <React.StrictMode>\n    <TodoList />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}